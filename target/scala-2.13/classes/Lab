import org.scalacheck.Prop.forAll
import org.scalacheck.util.Pretty
import org.scalacheck.{Arbitrary, Prop, Shrink}
import java.time.Duration


trait CommutativeGroup[A] {
  def combine(l: A, r: A): A
}

object CommutativeGroup
{
  def laws[A: Arbitrary: Shrink](implicit sg: CommutativeGroup[A], p: A => Pretty):List[Prop]={
    List(
      forAll { (a: A, b: A, c: A) => sg.combine(sg.combine(a,b),c) == sg.combine(a, sg.combine(b, c)) },
      forAll { (a: A, b: A) => sg.combine(a, b) == sg.combine(b, a)}
    )
  }
  implicit val asgDuration: CommutativeGroup[Duration] = (l: Duration, r: Duration) => {
    l.plus(r)
  }
}

object Lab_5 {
  def main(args: Array[String]): Unit = {
    CommutativeGroup.laws[Duration].foreach(_.check())
  }
}